import cron from 'node-cron';
import { Telegraf } from 'telegraf';
import dotenv from 'dotenv';
import { afternoonMessages, eveningMessages } from '../constants/notification-messages';

dotenv.config();

export function setupDailyScheduler(bot: Telegraf) {
  const rawIds = process.env.ALLOWED_USERS;

  if (!rawIds) {
    console.warn('‚ö†Ô∏è RECIPIENT_CHAT_IDS –Ω–µ –∑–∞–¥–∞–Ω –≤ .env. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.');
    return;
  }

  const chatIds = rawIds.split(',').map(id => id.trim()).filter(id => !!id);

  cron.schedule(
    '00 23 * * *',
    async () => {
      const message = eveningMessages[Math.floor(Math.random() * eveningMessages.length)];
      for (const chatId of chatIds) {
        try {
          await bot.telegram.sendMessage(chatId, message);
          console.log(`üì¨ –í–µ—á–µ—Ä–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ "${message}" –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ ${chatId}`);
        } catch (err) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–µ—á–µ—Ä–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ ${chatId}:`, err);
        }
      }
    },
    {
      timezone: 'Europe/Warsaw',
    }
  );

  cron.schedule(
    '00 14 * * *',
    async () => {
      const message = afternoonMessages[Math.floor(Math.random() * afternoonMessages.length)];
      for (const chatId of chatIds) {
        try {
          await bot.telegram.sendMessage(chatId, message);
          console.log(`üì¨ –î–Ω–µ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ "${message}" –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ ${chatId}`);
        } catch (err) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–Ω–µ–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ ${chatId}:`, err);
        }
      }
    },
    {
      timezone: 'Europe/Warsaw',
    }
  );
}
