require('dotenv').config();
const {Telegraf} = require('telegraf');
const express = require('express');
const mongoose = require('mongoose');
const ExcelJS = require('exceljs');
const Expense = require('./models/Expense');
const {Steps} = require('./enum/steps');
const {Currencies} = require("./constants/currencies");
const {Categories} = require("./constants/categories");
const {Persons} = require("./constants/persons");

const port = process.env.PORT || 4000;
const isLocal = process.env.IS_LOCAL === 'true';
const bot = new Telegraf(process.env.BOT_TOKEN);
const app = express();

mongoose
    .connect(process.env.MONGODB_URI)
    .then(() => console.log('MongoDB connected...'))
    .catch(err => console.log(err));

app.use(express.json());

if (!isLocal) {
    const domain = 'https://my-expense-bot.glitch.me';
    bot.telegram.setWebhook(`${domain}/bot${process.env.BOT_TOKEN}`);

    app.post(`/bot${process.env.BOT_TOKEN}`, (req, res) => {
        bot.handleUpdate(req.body);
        res.sendStatus(200);
    });
} else {
    bot.launch();
    console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ polling (–ª–æ–∫–∞–ª—å–Ω–æ)');
}

app.get('/', (req, res) => res.send('works'));
app.listen(port, () => console.log(`–°–µ—Ä–≤–µ—Ä —Å–ª—É—à–∞–µ—Ç –Ω–∞ –ø–æ—Ä—Ç—É ${port}`));

const userState = {};

const formatDate = (date) => {
    const day = String(date.getDate()).padStart(2, '0');
    const month = String(date.getMonth() + 1).padStart(2, '0');
    const year = date.getFullYear();
    return `${day}.${month}.${year}`;
};

function showMainMenu(ctx) {
    ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', {
        reply_markup: {
            keyboard: [
                ['‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞—Ç—É'],
                ['üìä –°–∫–∞—á–∞—Ç—å –æ—Ç—á–µ—Ç'],
            ],
            resize_keyboard: true,
        },
    });
}

bot.start((ctx) => {
    ctx.reply('–ü—Ä–∏–≤–µ—Ç! üëã');
    showMainMenu(ctx);
});

bot.hears('‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞—Ç—É', (ctx) => {
    userState[ctx.chat.id] = {step: Steps.Amount};
    ctx.reply('–í–≤–µ–¥–∏ —Å—É–º–º—É:');
});

bot.hears('üìä –°–∫–∞—á–∞—Ç—å –æ—Ç—á–µ—Ç', async (ctx) => {
    const now = new Date();
    const startOfMonth = new Date(now.getFullYear(), now.getMonth(), 1);
    const expenses = await Expense.find({date: {$gte: startOfMonth}});

    if (!expenses.length) return ctx.reply('–ó–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü —Ç—Ä–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.');

    const workbook = new ExcelJS.Workbook();
    const sheet = workbook.addWorksheet('–û—Ç—á–µ—Ç');

    sheet.columns = [
        {header: '–°—É–º–º–∞', key: 'amount'},
        {header: '–í–∞–ª—é—Ç–∞', key: 'currency'},
        {header: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è', key: 'category'},
        {header: '–ö—Ç–æ', key: 'person'},
        {header: '–î–∞—Ç–∞', key: 'date'},
    ];

    expenses.forEach(e => {
        sheet.addRow({
            amount: e.amount,
            currency: e.currency,
            category: e.category,
            person: e.person,
            date: e.date.toISOString().split('T')[0],
        });
    });

    const buffer = await workbook.xlsx.writeBuffer();
    await ctx.replyWithDocument({source: buffer, filename: 'report.xlsx'});
});

bot.on('text', async (ctx) => {
    const chatId = ctx.chat.id;
    const text = ctx.message.text;
    const state = userState[chatId];

    if (!state) return;

    switch (state.step) {
        case Steps.Amount: {
            const amount = parseFloat(text);
            if (isNaN(amount)) return ctx.reply('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É.');
            state.amount = amount;
            state.step = Steps.Currency;
            return ctx.reply('–í—ã–±–µ—Ä–∏ –≤–∞–ª—é—Ç—É:', {
                reply_markup: {
                    keyboard: Currencies.map(c => [c]),
                    one_time_keyboard: true,
                },
            });
        }

        case Steps.Currency:
            state.currency = text;
            state.step = Steps.Category;
            return ctx.reply('–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', {
                reply_markup: {
                    keyboard: Categories.map(c => [c]),
                    one_time_keyboard: true,
                },
            });

        case Steps.Category:
            state.category = text;
            state.step = Steps.Date;
            return ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:', {
                reply_markup: {
                    inline_keyboard: [
                        [{text: '–°–µ–≥–æ–¥–Ω—è', callback_data: 'today'}],
                        [{text: '–í—á–µ—Ä–∞', callback_data: 'yesterday'}],
                        [{text: '–í—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É', callback_data: 'choose_date'}],
                    ],
                },
            });

        case Steps.Date:
            let inputDate = text.trim();
            let parsedDate;

            if (inputDate === '' || inputDate.toLowerCase() === '—Å–µ–≥–æ–¥–Ω—è') {
                parsedDate = new Date();
            } else {
                const [day, month, year] = inputDate.split('.');
                parsedDate = new Date(`${year}-${month}-${day}`);
            }

            if (isNaN(parsedDate)) {
                return ctx.reply('–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π:');
            }

            state.date = parsedDate;
            state.step = Steps.Person;
            return ctx.reply('–ö—Ç–æ –ø–æ—Ç—Ä–∞—Ç–∏–ª?', {
                reply_markup: {
                    keyboard: Persons.map(p => [p]),
                    one_time_keyboard: true,
                },
            });

        case Steps.Person:
            state.person = text;

            const message = `
–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–∞—à—É —Ç—Ä–∞—Ç—É:
–°—É–º–º–∞: ${state.amount} ${state.currency}
–ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${state.category}
–ö—Ç–æ: ${state.person}
–î–∞—Ç–∞: ${formatDate(state.date)}
      `;

            state.step = Steps.Confirmation;
            return ctx.reply(message, {
                reply_markup: {
                    inline_keyboard: [
                        [{text: '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data: 'confirm'}],
                        [{text: '–û—Ç–º–µ–Ω–∞', callback_data: 'cancel'}],
                    ],
                },
            });
    }
});

bot.on('callback_query', async (ctx) => {
    const chatId = ctx.chat.id;
    const action = ctx.callbackQuery.data;

    if (!userState[chatId]) return;

    const state = userState[chatId];

    if (action === 'confirm') {
        await Expense.create({
            amount: state.amount,
            currency: state.currency,
            category: state.category,
            person: state.person,
            date: state.date || new Date(),
        });

        delete userState[chatId];
        await ctx.reply('‚úÖ –¢—Ä–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!!!');
        showMainMenu(ctx);
    }

    if (action === 'cancel') {
        delete userState[chatId];
        await ctx.reply('‚ùå –í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –∑–∞–ø–∏—Å—å.');
        showMainMenu(ctx);
    }

    if (action === 'today') {
        const date = new Date();
        state.date = date;
        state.step = Steps.Person;
        await ctx.reply(`–î–∞—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞: ${formatDate(date)}`);
        return ctx.reply('–ö—Ç–æ –ø–æ—Ç—Ä–∞—Ç–∏–ª?', {
            reply_markup: {keyboard: Persons.map(p => [p]), one_time_keyboard: true},
        });
    }

    if (action === 'yesterday') {
        const date = new Date();
        date.setDate(date.getDate() - 1);
        state.date = date;
        state.step = Steps.Person;
        await ctx.reply(`–î–∞—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞: ${formatDate(date)}`);
        return ctx.reply('–ö—Ç–æ –ø–æ—Ç—Ä–∞—Ç–∏–ª?', {
            reply_markup: {keyboard: Persons.map(p => [p]), one_time_keyboard: true},
        });
    }

    if (action === 'choose_date') {
        state.step = Steps.Date;
        return ctx.reply('–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ "—Å–µ–≥–æ–¥–Ω—è":');
    }
});
