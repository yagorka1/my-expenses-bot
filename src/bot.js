require('dotenv').config();
const TelegramBot = require('node-telegram-bot-api');
const mongoose = require('mongoose');
const Expense = require('./models/Expense');
const ExcelJS = require('exceljs');
const { Steps } = require('./enum/steps');
const { Currencies } = require("./constants/currencies");
const { Categories } = require("./constants/categories");
const { Persons } = require("./constants/persons");
const { InlineKeyboardButton, InlineKeyboardMarkup } = require('node-telegram-bot-api');
const express = require('express');

const port = process.env.PORT || 4000;

const app = express();

const bot = new TelegramBot(process.env.BOT_TOKEN, { polling: true });


app.get('/', (req, res) => {
    res.send('works');
});


const domain = 'https://my-expenses-bot-vsp1.onrender.com';


bot.setWebHook(`${domain}/bot${process.env.BOT_TOKEN}`);


app.post(`/bot${process.env.BOT_TOKEN}`, (req, res) => {
    bot.processUpdate(req.body);
    res.sendStatus(200);
});


app.listen(port, () => {
    console.log(`–°–µ—Ä–≤–µ—Ä —Å–ª—É—à–∞–µ—Ç –Ω–∞ –ø–æ—Ä—Ç—É ${port}`);
});

const today = new Date();
const yesterday = new Date(today);
yesterday.setDate(today.getDate() - 1);

const formatDate = (date) => {
    const day = String(date.getDate()).padStart(2, '0');
    const month = String(date.getMonth() + 1).padStart(2, '0');
    const year = date.getFullYear();
    return `${day}.${month}.${year}`;
};

mongoose
    .connect(process.env.MONGODB_URI)
    .then(() => console.log('MongoDB connected...'))
    .catch(err => console.log(err));

const userState = {};

bot.onText(/\/start/, (msg) => {
    bot.sendMessage(msg.chat.id, '–ü—Ä–∏–≤–µ—Ç! üëã');
    showMainMenu(msg.chat.id);
});

bot.onText(/‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞—Ç—É/, (msg) => {
    userState[msg.chat.id] = {};
    bot.sendMessage(msg.chat.id, '–í–≤–µ–¥–∏ —Å—É–º–º—É:');
    userState[msg.chat.id].step = Steps.Amount;
});

bot.onText(/üìä –°–∫–∞—á–∞—Ç—å –æ—Ç—á–µ—Ç/, async (msg) => {
    const chatId = msg.chat.id;
    const now = new Date();
    const startOfMonth = new Date(now.getFullYear(), now.getMonth(), 1);

    const expenses = await Expense.find({ date: { $gte: startOfMonth } });

    if (!expenses.length) {
        return bot.sendMessage(chatId, '–ó–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü —Ç—Ä–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.');
    }

    const workbook = new ExcelJS.Workbook();
    const sheet = workbook.addWorksheet('–û—Ç—á–µ—Ç');

    sheet.columns = [
        { header: '–°—É–º–º–∞', key: 'amount' },
        { header: '–í–∞–ª—é—Ç–∞', key: 'currency' },
        { header: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è', key: 'category' },
        { header: '–ö—Ç–æ', key: 'person' },
        { header: '–î–∞—Ç–∞', key: 'date' },
    ];

    expenses.forEach(e => {
        sheet.addRow({
            amount: e.amount,
            currency: e.currency,
            category: e.category,
            person: e.person,
            date: e.date.toISOString().split('T')[0],
        });
    });

    const buffer = await workbook.xlsx.writeBuffer();

    return bot.sendDocument(chatId, buffer, {}, {
        filename: 'report.xlsx',
        contentType: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
    });
});

bot.onText(/\/add/, (msg) => {
    userState[msg.chat.id] = {};
    bot.sendMessage(msg.chat.id, '–í–≤–µ–¥–∏ —Å—É–º–º—É:');
    userState[msg.chat.id].step = 'amount';
});

bot.on('message', async (msg) => {
    const chatId = msg.chat.id;
    const text = msg.text;
    const state = userState[chatId];
    if (!state) return;

    switch (state.step) {
        case Steps.Amount:
            const amount = parseFloat(text);
            if (isNaN(amount)) return bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É.');

            state.amount = amount;
            state.step = Steps.Currency;
            return bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏ –≤–∞–ª—é—Ç—É:', {
                reply_markup: { keyboard: Currencies.map(c => [c]), one_time_keyboard: true },
            });

        case Steps.Currency:
            state.currency = text;
            state.step = Steps.Category;
            return bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', {
                reply_markup: { keyboard: Categories.map(c => [c]), one_time_keyboard: true },
            });

        case Steps.Category:
            state.category = text;

            state.step = Steps.Date;
            return bot.sendMessage(chatId, `–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:`, {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: '–°–µ–≥–æ–¥–Ω—è', callback_data: 'today' }],
                        [{ text: '–í—á–µ—Ä–∞', callback_data: 'yesterday' }],
                        [{ text: '–í—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É', callback_data: 'choose_date' }],
                    ],
                },
            });

        case Steps.Date:
            const inputDate = text.trim();
            let parsedDate;

            if (inputDate === '' || inputDate.toLowerCase() === '—Å–µ–≥–æ–¥–Ω—è') {
                parsedDate = new Date();
            } else {
                const [day, month, year] = inputDate.split('.');
                parsedDate = new Date(`${year}-${month}-${day}`);
            }

            if (isNaN(parsedDate)) {
                return bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π:');
            }

            state.date = parsedDate;
            state.step = Steps.Person;

            return bot.sendMessage(chatId, '–ö—Ç–æ –ø–æ—Ç—Ä–∞—Ç–∏–ª?', {
                reply_markup: { keyboard: Persons.map(p => [p]), one_time_keyboard: true },
            });

        case Steps.Person:
            state.person = text;

            const confirmationMessage = `
                –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–∞—à—É —Ç—Ä–∞—Ç—É:
                –°—É–º–º–∞: ${state.amount} ${state.currency}
                –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${state.category}
                –ö—Ç–æ: ${state.person}
                –î–∞—Ç–∞: ${formatDate(state.date)}
            `;

            state.step = Steps.Confirmation;
            return bot.sendMessage(chatId, confirmationMessage, {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data: 'confirm' }],
                        [{ text: '–û—Ç–º–µ–Ω–∞', callback_data: 'cancel' }],
                    ],
                },
            });
    }
});

bot.on('callback_query', async (query) => {
    const chatId = query.message.chat.id;
    const action = query.data;

    console.log(action);
    console.log(userState);
    console.log(userState[chatId]);

    if(!userState[chatId]) {
        return
    }


    if (action === 'confirm') {
        const state = userState[chatId];
        console.log(state);
        await Expense.create({
            amount: state.amount,
            category: state.category,
            currency: state.currency,
            person: state.person,
            date: state.date || new Date(),
        });

        delete userState[chatId];

        // –û—á–∏—Å—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        bot.sendMessage(chatId, '‚úÖ –¢—Ä–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!');
        showMainMenu(chatId);
    }

    if (action === 'cancel') {
        delete userState[chatId];

        // –û—á–∏—Å—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –æ—Ç–º–µ–Ω–∞
        bot.sendMessage(chatId, '‚ùå –í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –∑–∞–ø–∏—Å—å.');
        showMainMenu(chatId);
    }

    if (action === 'today') {
        const todayDate = new Date();
        userState[chatId].date = todayDate;
        bot.sendMessage(chatId, `–î–∞—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞: ${formatDate(todayDate)}`);
        userState[chatId].step = Steps.Person;
        return bot.sendMessage(chatId, '–ö—Ç–æ –ø–æ—Ç—Ä–∞—Ç–∏–ª?', {
            reply_markup: { keyboard: Persons.map(p => [p]), one_time_keyboard: true },
        });
    }

    if (action === 'yesterday') {
        const yesterdayDate = new Date();
        yesterdayDate.setDate(yesterdayDate.getDate() - 1);
        userState[chatId].date = yesterdayDate;
        bot.sendMessage(chatId, `–î–∞—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞: ${formatDate(yesterdayDate)}`);
        userState[chatId].step = Steps.Person;
        return bot.sendMessage(chatId, '–ö—Ç–æ –ø–æ—Ç—Ä–∞—Ç–∏–ª?', {
            reply_markup: { keyboard: Persons.map(p => [p]), one_time_keyboard: true },
        });
    }

    if (action === 'choose_date') {
        userState[chatId].step = Steps.Date;
        return bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ "—Å–µ–≥–æ–¥–Ω—è":');
    }
});

function showMainMenu(chatId) {
    bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', {
        reply_markup: {
            keyboard: [
                ['‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞—Ç—É'],
                ['üìä –°–∫–∞—á–∞—Ç—å –æ—Ç—á–µ—Ç'],
            ],
            resize_keyboard: true,
        },
    });
}
